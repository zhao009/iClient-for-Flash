<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:ic="http://www.supermap.com/iclient/2010"
			   xmlns:is="http://www.supermap.com/iserverjava/2010" 
			   width="100%" height="100%"
			   creationComplete="initApp()">
	<!--子图层控制-->
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.supermap.web.actions.Pan;
			import com.supermap.web.iServerJava6R.layerServices.GetLayersInfoResult;
			import com.supermap.web.iServerJava6R.layerServices.GetLayersInfoService;
			import com.supermap.web.iServerJava6R.layerServices.ServerLayer;
			import com.supermap.web.iServerJava6R.layerServices.SetLayerResult;
			import com.supermap.web.iServerJava6R.layerServices.SetLayerStyleParameters;
			import com.supermap.web.iServerJava6R.layerServices.SetLayerStyleService;
			import com.supermap.web.iServerJava6R.layerServices.UGCVectorLayer;
			import com.supermap.web.utils.serverTypes.ServerColor;
			import com.supermap.web.utils.serverTypes.ServerStyle;
			
			import mx.controls.Alert;
			import mx.controls.CheckBox;
			import mx.rpc.AsyncResponder;
			
			import utilEvent.ReadURLEvent;
			
			private var checkBoxes:Array = new Array();
			private var viewConfig:ViewConfig;
			[Bindable]
			private var mapUrl:String;
			private var sourceID:String;
			
			private var defaultStyle:ServerStyle;
			private var defaultFillForeColor:ServerColor;
			
			private function initApp():void
			{
				viewConfig = new ViewConfig(this);
				this.addEventListener(ReadURLEvent.READ_COMPLETE, readURLCompelte);
			} 
			
			//获取服务地址
			private function readURLCompelte(event:ReadURLEvent):void
			{
				//获取地图服务地址，默认 IP 为：localhost
				//用户若要更改服务地址，直接修改服务地址配置文件 mapUrlConfig.xml
				//或直接在此输入服务地址
				//格式如：restUrl = http://localhost:8090/iserver/services/map-world/rest/maps/World Map
				mapUrl = viewConfig.webUrl + ViewConfig.World_MAP;
				this.getLayersInfo();
			}
			
			//获取图层信息
			private function getLayersInfo():void
			{
				var getLayersInfoService:GetLayersInfoService = new GetLayersInfoService(this.mapUrl);
				getLayersInfoService.processAsync(new AsyncResponder(this.getLayerInfoComplete, this.excuteErros_Get, "getLayerInfo"));
			}
			
			//获取图层信息
			private function getLayerInfoComplete(result:GetLayersInfoResult, object:Object = null):void
			{
				if(result.layersInfo.length == 0)
				{
					Alert.show("查询结果为空！", null, 4, this);
					return;
				}
				for(var i:int = 0;i<result.layersInfo.length;i++)
				{
					var serverLayer:ServerLayer = result.layersInfo[i] as ServerLayer;
					if(serverLayer.ugcLayer is UGCVectorLayer)
					{
						var ugcVectorLayer:UGCVectorLayer = serverLayer.ugcLayer as UGCVectorLayer;
						this.defaultStyle = ugcVectorLayer.style;
						break;
					}
				}
				this.defaultFillForeColor = this.defaultStyle.fillForeColor;
				
				
			}
			
			
			//子图层风格设置
			private function layerStyle_clickHandler(event:MouseEvent):void
			{
				//子图层风格参数设置
				var setLayerStyleParameters:SetLayerStyleParameters = new SetLayerStyleParameters();
				setLayerStyleParameters.layerName = "Ocean@World";
				setLayerStyleParameters.resourceID = this.sourceID;
				setLayerStyleParameters.holdTime = 100;
				setLayerStyleParameters.style = this.defaultStyle;
				this.defaultFillForeColor = this.defaultStyle.fillForeColor;
				setLayerStyleParameters.style.fillForeColor = this.viewConfig.toRGB(this.styleColor.selectedColor);
				
				var setLayerStyleService:SetLayerStyleService = new SetLayerStyleService(this.mapUrl);
				setLayerStyleService.processAsync(setLayerStyleParameters, 
					new AsyncResponder(this.processCompleted, this.excuteErros_Get, "setStyle"));
			}
			
			//分析成功时调用的处理函数
			private function processCompleted(result:SetLayerResult, mark:Object):void
			{
				if(result.newResourceID)
				{
					this.restLayer.layersID = result.newResourceID;
					this.sourceID = result.newResourceID;
					this.restLayer.refresh();
				}
			} 
			
			//分析失败时调用的处理函数
			private function excuteErros_Get(object:Object, mark:Object):void
			{
				if(mark == "getLayerInfo")
					Alert.show("图层信息获取失败！", null, 4, this);
				else if(mark == "setStyle")
					Alert.show("子图层风格设置失败", null, 4, this);
			}
			
			//全幅
			private function viewEntireMap(event:MouseEvent):void
			{
				map.viewEntire();
			}
			
			//平移
			private function panMap():void
			{
				this.map.action = new Pan(this.map);
			} 
		]]>
	</fx:Script>
	
	<!--添加地图-->
	<ic:Map id="map" x="0" y="0"  height="100%" width="100%">
		<ic:TiledDynamicRESTLayer id="restLayer" url="{this.mapUrl}" />
	</ic:Map> 
	
	
	
	<!--操作窗口-->
	<s:controlBarLayout>
		<s:BasicLayout/>
	</s:controlBarLayout>
	<s:controlBarContent>
		<s:HGroup verticalAlign="middle" height="100%" left="0">
			<s:Line height="40" width="10" depth="10"/>
			<s:Label text="Ocean@World子图层颜色：" verticalAlign="middle" fontSize="15" fontWeight="bold" fontFamily="宋体" height="23"/>
			<mx:ColorPicker id="styleColor" selectedColor="0x000000"/>
			<mx:VRule height="30"/>
			<s:Button label="子图层风格设置" verticalCenter="0" click="layerStyle_clickHandler(event)" 
					  fontSize="15" height="26" fontFamily="宋体" fontWeight="bold"/>
		</s:HGroup>
		
		<s:HGroup height="100%" verticalAlign="middle" right="10">
			<mx:VRule height="40"/>
			<s:Button skinClass="skins.panBtnSkin"
					  click="panMap()"/>
			<s:Button id="entire" toolTip="全幅显示" 
					  skinClass="skins.viewEntireSkin" click="viewEntireMap(event)"/>
		</s:HGroup>
	</s:controlBarContent>
</s:Application>
