<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:ic="http://www.supermap.com/iclient/2010"
			   xmlns:is="http://www.supermap.com/iserverjava/2010"
			   width="100%"
			   height="100%"
			   creationComplete="initApp()">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.supermap.web.actions.DrawAction;
			import com.supermap.web.actions.DrawPoint;
			import com.supermap.web.actions.Pan;
			import com.supermap.web.components.FeatureDataGrid;
			import com.supermap.web.core.Feature;
			import com.supermap.web.core.Point2D;
			import com.supermap.web.core.geometry.Geometry;
			import com.supermap.web.core.geometry.Route;
			import com.supermap.web.core.styles.PredefinedMarkerStyle;
			import com.supermap.web.events.DrawEvent;
			import com.supermap.web.iServerJava6R.FilterParameter;
			import com.supermap.web.iServerJava6R.Recordset;
			import com.supermap.web.iServerJava6R.queryServices.QueryBySQLParameters;
			import com.supermap.web.iServerJava6R.queryServices.QueryBySQLService;
			import com.supermap.web.iServerJava6R.queryServices.QueryResult;
			import com.supermap.web.iServerJava6R.spatialAnalystServices.RouteCalculateMeasureParameters;
			import com.supermap.web.iServerJava6R.spatialAnalystServices.RouteCalculateMeasureResult;
			import com.supermap.web.iServerJava6R.spatialAnalystServices.RouteCalculateMeasureService;
			import com.supermap.web.utils.serverTypes.ServerColor;
			import com.supermap.web.utils.serverTypes.ServerStyle;
			
			import mx.controls.Alert;
			import mx.rpc.AsyncResponder;
			
			import utilEvent.ReadURLEvent;

			private var viewConfig:ViewConfig;
			[Bindable]
			private var mapUrl:String;
			[Bindable]
			private var dataSetUrl:String;

			private var routeObj:Route;
			private var routeCMP:RouteCalculateMeasureParameters=new RouteCalculateMeasureParameters();
			private var drawPoint:DrawPoint;
			private var routeCMS:RouteCalculateMeasureService;

			private function initApp():void
			{
				viewConfig=new ViewConfig(this);
				this.addEventListener(ReadURLEvent.READ_COMPLETE, readURLCompelte);
				//监听各种绘制操作
				drawPoint=new DrawPoint(map);
				drawPoint.addEventListener(DrawEvent.DRAW_END, addPoint);
			}

			//获取服务地址
			private function readURLCompelte(event:ReadURLEvent):void
			{
				//获取地图服务、数据集服务地址，默认 IP 为：localhost
				//用户若要更改服务地址，直接修改服务地址配置文件 mapUrlConfig.xml
				//或直接在此输入服务地址
				//格式如：restUrl = http://localhost:8090/iserver/services/map-world/rest/maps/World Map
				mapUrl=viewConfig.webUrl + ViewConfig.ChangChun_MAP;
				dataSetUrl=viewConfig.webUrl + ViewConfig.SpatialAnylyat_Changchun;
			}

			protected function createRouteObjBtn_clickHandler(event:MouseEvent):void
			{
				//定义 SQL 查询参数,
				var queryBySQLParam:QueryBySQLParameters=new QueryBySQLParameters();
				var filter:FilterParameter=new FilterParameter();
				filter.name="RouteDT_road@Changchun";
				filter.attributeFilter="RouteID = 1690";
				queryBySQLParam.filterParameters=[filter];

				/* 执行 SQL查询 */
				var queryByRouteIDService:QueryBySQLService=new QueryBySQLService(mapUrl);
				queryByRouteIDService.processAsync(queryBySQLParam, new AsyncResponder(this.queryCompleted, function(object:Object, mark:Object=null):void
					{
						Alert.show("与服务端交互失败", "抱歉", 4, this);
					}, null));
			}

			private function queryCompleted(queryResult:QueryResult, mark:Object=null):void
			{
				var Routegeometry:Route=queryResult.recordsets[0].features[0].geometry;
				var Linefeature:Feature=new Feature();
				Linefeature.geometry=Routegeometry;
				this.featuresLayer.addFeature(Linefeature);
				routeObj=Routegeometry;
				Alert.show("查询路由对象成功！", "查询成功", 4, this);
			}


			protected function calculateMeasureBtn_clickHandler(event:MouseEvent):void
			{
				if (!routeObj)
				{
					Alert.show("请通过查询获取路由对象！", "抱歉", 4, this);
					return;
				}
				var markerStyle:PredefinedMarkerStyle=new PredefinedMarkerStyle("circle");
				drawPoint.style=markerStyle;
				map.action=drawPoint;
			}

			protected function removeBtn_clickHandler(event:MouseEvent):void
			{
				this.featuresLayer.clear();
				map.action=new Pan(map);
				routeObj=null;
			}

			protected function addPoint(event:DrawEvent):void
			{
				featuresLayer.addFeature(event.feature);
				var point2d:Point2D=event.endPoint;

				routeCMP.sourceRoute=routeObj;
				routeCMP.tolerance=10;
				routeCMP.point=point2d;
				routeCMP.isIgnoreGap=false;

				routeCMS=new RouteCalculateMeasureService(dataSetUrl);

				routeCMS.processAsync(routeCMP, new AsyncResponder(this.calculateCompleted, function(object:Object, mark:Object=null):void
					{
						Alert.show("计算失败，请确保点在路由对象上或容限范围内", "抱歉", 4, this);
					}, null));

			}

			private function calculateCompleted(calculateResult:RouteCalculateMeasureResult, mark:Object=null):void
			{
				trace(calculateResult);
				if (calculateResult.succeed)
				{
					Alert.show("查询获取的M值为" + calculateResult.measure, "计算成功", 4, this);
				}
				else
				{
					Alert.show("计算失败，请确保点在路由对象上或容限范围内", "抱歉", 4, this);
				}
			}
		]]>
	</fx:Script>

	<!--添加地图-->
	<ic:Map id="map"
			width="100%"
			height="100%">
		<ic:TiledDynamicRESTLayer enableServerCaching="false"
								  url="{this.mapUrl}"/>
		<ic:FeaturesLayer id="featuresLayer"/>
	</ic:Map>

	<s:controlBarLayout>
		<s:BasicLayout/>
	</s:controlBarLayout>
	<s:controlBarContent>
		<s:HGroup left="10"
				  height="100%"
				  fontFamily="宋体"
				  fontSize="15"
				  fontWeight="bold"
				  verticalAlign="middle">
			<s:Button id="createRouteObjBtn"
					  height="26"
					  label="查询路由对象"
					  click="createRouteObjBtn_clickHandler(event)"/>
			<s:Button id="calculateMeasureBtn"
					  height="26"
					  label="指定查询点"
					  click="calculateMeasureBtn_clickHandler(event)"/>
			<s:Button id="removeBtn"
					  height="26"
					  label="清除"
					  click="removeBtn_clickHandler(event)"/>
		</s:HGroup>
	</s:controlBarContent>
</s:Application>
