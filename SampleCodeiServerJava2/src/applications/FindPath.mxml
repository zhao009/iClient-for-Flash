<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:ic="http://www.supermap.com/iclient/2010" 
			   xmlns:is="http://www.supermap.com/iserverjava/2008"
			   creationComplete="initApp()"
			   width="100%" height="100%">
	
	<fx:Script>
		<![CDATA[
			[Bindable]
			private var viewConfig:ViewConfig;
			private function initApp():void
			{
				viewConfig = new ViewConfig(this);
			} 
		]]>
	</fx:Script>
	
	<fx:Script>
		<![CDATA[
			import com.supermap.web.actions.DrawPoint;
			import com.supermap.web.actions.Pan;
			import com.supermap.web.core.Feature;
			import com.supermap.web.core.Point2D;
			import com.supermap.web.core.Rectangle2D;
			import com.supermap.web.core.geometry.*;
			import com.supermap.web.core.styles.PredefinedLineStyle;
			import com.supermap.web.events.DrawEvent;
			import com.supermap.web.events.MapEvent;
			import com.supermap.web.events.MapMouseEvent;
			import com.supermap.web.iServerJava2.*;
			import com.supermap.web.iServerJava2.mapServices.*;
			import com.supermap.web.iServerJava2.networkAnalystServices.*;
			import com.supermap.web.mapping.FeaturesLayer;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.ListEvent;
			import mx.messaging.channels.StreamingAMFChannel;
			import mx.rpc.*;		
			
			private var DEFAULT_MAP_NAME:String = "Changchun";
			
			private var _pathPoints:Array = [];
			private var fl:FeaturesLayer;
			private var pointIndex:int;//分析点顺序标识
			
			private function palying():void
			{
				pointIndex = 1;
				fl = new FeaturesLayer();
				this.map.addLayer(fl);
				titlewin.visible = true;
				this.map.viewBounds = new Rectangle2D(-1740.7534752292868,-7668.24529207453,10748.00153953446,-77.42388466343982); 
			}
			
			//选择用于最佳路径分析的分析点
			private function excuteChoosePathPoint():void 
			{
				var choosePathPoint:DrawPoint = new DrawPoint(map);								
				map.action = choosePathPoint;
				choosePathPoint.addEventListener(DrawEvent.DRAW_END,addFeature);				
			}	
			
			//监听分析点绘制完毕事件 DrawEvent.DRAW_END
			private function addFeature(event:DrawEvent):void
			{
				if(event.feature.geometry is GeoPoint)
				{
					var point:GeoPoint = event.feature.geometry as GeoPoint;
					var point2D:Point2D = new Point2D(point.x, point.y);
					_pathPoints.push(point2D);
				}
				
				event.feature.toolTip = pointIndex.toString();
				fl.addFeature(event.feature);
				pointIndex++;
			}
			
			//最佳路径分析
			private function excuteFindPathAnalyst():void 
			{
				if(this._pathPoints.length < 2)
				{
					Alert.show("请输入至少两个分析点！","抱歉",4,this);
					return;
				}
				map.action = new Pan(map);
				pointIndex = 1;
				
				//定义用于最近设施查找的弧段权值信息
				var weightFieldInfo:WeightFieldInfo = new WeightFieldInfo();
				weightFieldInfo.name = "LENGTH";
				weightFieldInfo.fTWeightField = "SMLENGTH";
				weightFieldInfo.tFWeightField = "SMLENGTH";
				
				//定义网络模型：定义数据集、数据源、弧段字段、结点字段、权值信息、障碍边、障碍点字段等
				var networkModelSetting:NetworkModelSetting = new NetworkModelSetting();				
				networkModelSetting.networkDatasetName = "RoadNet";
				networkModelSetting.networkDataSourceName = "changchun";
				networkModelSetting.tolerance = 100;
				networkModelSetting.nodeIDField = "SMNODEID";
				networkModelSetting.edgeIDField = "SMID";
				networkModelSetting.tNodeIDField = "SMTNODE";
				networkModelSetting.fNodeIDField = "SMFNODE";
				networkModelSetting.weightFieldInfos = [weightFieldInfo];				
				
				//定义网络分析参数：路径途经结点集合、返回结果类型、障碍边、障碍点等
				var networkAnalystParam:NetworkAnalystParam = new NetworkAnalystParam();
				networkAnalystParam.point2Ds = this._pathPoints;
				networkAnalystParam.isEdgesReturn = true;
				networkAnalystParam.isNodesReturn = true;
				networkAnalystParam.isPathGuidesReturn = true;
				networkAnalystParam.isPathsReturn = true;
				networkAnalystParam.isStopsReturn = true;
				
				//定义路径参数：网络分析参数、路径类型（是否为弧段最少路径）
				var pathParam:PathParam = new PathParam();
				pathParam.networkAnalystParam = networkAnalystParam;
				pathParam.hasLeastEdgeCount = this.isLeastEdgeCount.selected;
				
				//定义最佳路径分析所需参数
				var findPathParameters:FindPathParameters = new FindPathParameters();
				findPathParameters.mapName = "Changchun";
				findPathParameters.networkSetting = networkModelSetting;
				findPathParameters.pathParam = pathParam;
				
				//执行最佳路径分析，即将进行最佳路径分析所需的所有参数传送至服务端，并获取服务端返回的结果数据
				var findPathService:FindPathService = new FindPathService(viewConfig.webUrl);
				findPathService.execute(new AsyncResponder(this.displayNetworkAnalystResult, excuteErros, null), findPathParameters);
			}
			
			//最佳路径分析错误时调用此函数
			private function excuteErros(object:Object, mark:Object = null):void
			{
				Alert.show("最佳路径查找失败","抱歉",4,this);
			}
			
			//显示最佳路径查找结果
			private function displayNetworkAnalystResult(networkAnalystResult:NetworkAnalystResult, mark:Object = null):void
			{
				if(networkAnalystResult.paths == null)
				{
					Alert.show("查询结果为空","抱歉",4,this);
					return;
				}
				var paths:Array = networkAnalystResult.paths;
				this.commonDisplayNetworkAnalystResult(paths);
				this._pathPoints.splice(0);//清空分析点数组
			}
			
			//将服务端几何对象转换为客户端几何对象
			private function commonDisplayNetworkAnalystResult(paths:Array):void
			{
				if(paths.length > 0)
				{
					for(var i:int = 0; i < paths.length; i++)
					{
						var geo:ServerGeometry = paths[i] as ServerGeometry;
						if(geo.feature == ServerFeatureType.LINE || geo.feature == ServerFeatureType.LINEM)
						{
							var geoLine:GeoLine = geo.toGeoLine();
							var lineStyle:PredefinedLineStyle = new PredefinedLineStyle(PredefinedLineStyle.SYMBOL_SOLID, 0, 1, 2);
							var feature:Feature = new Feature();
							
							feature.geometry = geoLine;
							feature.style = lineStyle;
							this.fl.addFeature(feature);
						}
					}
				}
			}
			
			//清除路径分析结果
			private function removeFeature():void
			{				
				this.fl.clear();
				this._pathPoints = [];
				this.map.action = new Pan(map);
			}

			private function panMap(event:MouseEvent):void
			{
				this.map.action = new Pan(map);
			}
		]]>
	</fx:Script>
	
	<!--添加地图-->
	<s:Panel fontFamily="宋体" title="请首先选择分析点（至少两个），然后再点击“最佳路径分析”" width="100%" height="100%" fontSize="18">
		<ic:Map id="map" load="palying()">
			<is:TiledDynamicIServerLayer url="{viewConfig.webUrl}" 
										   mapServiceAddress="{viewConfig.gisUrl}"
										   mapServicePort="8600" 
										   mapName="Changchun"/>
		</ic:Map>
	</s:Panel>
	
	<!--参数设置窗口-->
	<s:Panel id="titlewin" title="最佳路径分析" fontSize="15" right="5" top="50" backgroundColor="#454343" backgroundAlpha="0.48">
		<s:VGroup top="5" gap="10" horizontalCenter="0" bottom="10">
			<s:HGroup paddingLeft="22">
				<mx:Spacer width="12"/>
				<s:Label text="最少弧段："
						  styleName="AboutVersion"
						  color="0"/>
				<mx:Spacer width="5"/>
				<s:CheckBox id="isLeastEdgeCount"/>
			</s:HGroup>
			
			<s:HGroup horizontalAlign="center" gap="10" width="300">
				<s:Button label="选择分析点"
						   id="choosePathPoint"
						   click="excuteChoosePathPoint()"
						   width="110"
						   styleName="AboutVersion"
						   color="0"/>
				
				<s:Button label="最佳路径分析"
						   id="submitFindPathAnalyst"
						   click="excuteFindPathAnalyst()"
						   width="110"
						   styleName="AboutVersion"
						   color="0"/>
			</s:HGroup>
			<s:HGroup horizontalAlign="center" gap="10" width="100%">
				<s:Button skinClass="skins.clearBtnSkin"
						  id="AreaAnalyst"
						  click="removeFeature()"/>
				<s:Button skinClass="skins.panBtnSkin"
						  click="panMap(event)"/>

			</s:HGroup>
		</s:VGroup>
	</s:Panel>
</s:Application>
